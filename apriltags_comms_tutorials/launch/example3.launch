<?xml version="1.0"?>
<!-- Launches two robots, both containing observers and receivers. 

     The first robot has a known position (map->base), the second has an unknown
     position. They both detect an apriltag, and are able to calculate the
     second robots position relative to the map. 
     -->

<launch>  
  <arg name="camera1" default="camera"/>
  <arg name="camera2" default="c920"/>
  <arg name="pi_on_2" default="1.57079632679"/>
  <!-- First robot. -->
  <group ns="obs">
    <!-- Create TF geometry. We know the position of the camera relative to the
         robot. We also convert between camera physical (ROS coords) with 
         camera optical (OpenCV coords).
         (x y z yaw pitch roll frame_id child_frame_id period_in_ms).  -->
    <node name="static_camphys2camopt_tf"   pkg="tf" type="static_transform_publisher"
      args="0 0 0 -$(arg pi_on_2) 0 -$(arg pi_on_2) cam_phys cam_opt 100"/>
    <node name="static_base2camphys_tf" pkg="tf" type="static_transform_publisher"
      args="0 0 0 0 0 0 base_link cam_phys 100"/>
      
    <!-- Publish map->base. -->
    <node pkg="rostopic" type="rostopic" name="map2base" args="pub 
        -r 1
        -s 
        map_to_base 
        nav_msgs/Odometry
        '{header: {stamp: now, frame_id: map}, 
          child_frame_id: base_link,
          pose: {pose: {position: {x: 0.1,y: 0,z: 0}, 
                        orientation: {x: 0, y: 0, z: 0, w: 1}}}}' "/>
    <node name="static_map2base_tf" pkg="tf" type="static_transform_publisher"
      args="0.1 0 0 0 0 0 map base_link 100"/>
      
    <!-- Launch this computers camera. Cameras should be calibrated.
         To list all detected video devices use: ls -ltrh /dev/video* -->
    <include file="$(find apriltags_comms_tutorials)/launch/usb_camera.launch">
      <arg name="gui"             value="false"/>
      <arg name="camera_name"     value="$(arg camera1)"/>
      <arg name="camera_config"   value="$(arg camera1)"/>
      <arg name="camera_frame_id" value="cam_opt"/>
      <arg name="video_device"    value="/dev/video0"/>
      <arg name="image_width"     default="640"/>
      <arg name="image_height"    default="480"/>
    </include>
    <node ns="$(arg camera1)" pkg="image_proc" type="image_proc" name="image_proc" output="screen"/>
    
    <!-- Detect the tags. -->
    <node pkg="apriltags2_ros" type="apriltags2_ros_continuous_node" name="apriltags2" output="screen">
      <rosparam command="load" file="$(find apriltags_comms_tutorials)/params/apriltags2-tags.yaml" />
      <param name="camera_frame"                 value="cam_opt"/>
      <param name="publish_tf"                   value="true"/>
      <param name="publish_tag_detections_image" value="true" /> 
      <remap from="image_rect"  to="$(arg camera1)/image_rect" />
      <remap from="camera_info" to="$(arg camera1)/camera_info" />
    </node>
    
    <!-- Communicate apriltags detections to other robots. -->
    <node pkg="apriltags_comms" type="observer" name="observer" output="screen"> 
      <param name="base_frame" value="base_link"/>
    </node>
  </group>
  
  <!-- Second robot. -->
  <group if="true" ns="rec">
    <!-- Create TF geometry. We know the position of the camera relative to the
         robot. We also convert between camera physical (ROS coords) with 
         camera optical (OpenCV coords).
         (x y z yaw pitch roll frame_id child_frame_id period_in_ms).  -->
    <node name="static_camphys2camopt_tf"   pkg="tf" type="static_transform_publisher"
          args="0 0 0 -$(arg pi_on_2) 0 -$(arg pi_on_2) cam_phys cam_opt 100">
      <remap from="/tf"        to="/rec/tf"/>
      <remap from="/tf_static" to="/rec/tf_static"/>
    </node>
    <node name="static_base2camphys_tf" pkg="tf" type="static_transform_publisher"
          args="0 0 0 0 0 0 base_link cam_phys 100">
      <remap from="/tf"        to="/rec/tf"/>
      <remap from="/tf_static" to="/rec/tf_static"/>
    </node>
      
    <!-- Launch this computers camera. Cameras should be calibrated.
         To list all detected video devices use: ls -ltrh /dev/video* -->
    <include file="$(find apriltags_comms_tutorials)/launch/usb_camera.launch">
      <arg name="gui"             value="false"/>
      <arg name="camera_name"     value="$(arg camera2)"/>
      <arg name="camera_config"   value="$(arg camera2)"/>
      <arg name="camera_frame_id" value="cam_opt"/>
      <arg name="video_device"    value="/dev/video1"/>
      <arg name="image_width"     default="1280"/>
      <arg name="image_height"    default="720"/>
    </include>
    <node ns="$(arg camera2)" pkg="image_proc" type="image_proc" name="image_proc" output="screen"/>
    
    <!-- Detect the tags. -->
    <node pkg="apriltags2_ros" type="apriltags2_ros_continuous_node" name="apriltags2" output="screen">
      <rosparam command="load" file="$(find apriltags_comms_tutorials)/params/apriltags2-tags.yaml" />
      <param name="camera_frame"                 value="cam_opt"/>
      <param name="publish_tf"                   value="true"/>
      <param name="publish_tag_detections_image" value="true"/> 
      <remap from="image_rect"  to="$(arg camera2)/image_rect" />
      <remap from="camera_info" to="$(arg camera2)/camera_info" />
      <remap from="/tf"         to="/rec/tf"/>
      <remap from="/tf_static"  to="/rectf_static"/>
    </node>
    
    <!-- Receive apriltags comms. -->
    <node pkg="apriltags_comms" type="receiver" name="receiver" output="screen"> 
      <param name="base_frame"       value="base_link"/>
      <param name="publish_map2base" value="true"/>
      <remap from="/tf"        to="/rec/tf"/>
      <remap from="/tf_static" to="/rec/tf_static"/>
    </node>
  </group>
  
  <!-- Display on RVIZ. -->
  <group if="true">
    <node pkg="rviz" type="rviz" name="rviz_obs"
        args="-d $(find apriltags_comms_tutorials)/rviz/example3_obs.rviz">
    </node>
    <node pkg="rviz" type="rviz" name="rviz_rec" 
        args="-d $(find apriltags_comms_tutorials)/rviz/example3_rec.rviz">
      <remap from="/tf"        to="/rec/tf"/>
      <remap from="/tf_static" to="/rec/tf_static"/>
    </node>
  </group>   
  
</launch>
